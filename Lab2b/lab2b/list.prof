Total: 1517 samples
    1128  74.4%  74.4%     1128  74.4% ts_lock
     275  18.1%  92.5%      275  18.1% __strcmp_sse42
      64   4.2%  96.7%      223  14.7% SortedList_lookup
      47   3.1%  99.8%      165  10.9% SortedList_insert
       2   0.1%  99.9%        2   0.1% _init
       1   0.1% 100.0%        1   0.1% __clock_gettime
       0   0.0% 100.0%     1517 100.0% __clone
       0   0.0% 100.0%     1517 100.0% pthread_ts
       0   0.0% 100.0%     1517 100.0% start_thread
ROUTINE ====================== SortedList_insert in /u/cs/ugrad/thomasc/Documents/CS111/lab2/lab2b/SortedList.c
    47    165 Total samples (flat / cumulative)
     .      .    3: #include <stdlib.h> //exit
     .      .    4: #include <string.h> //strcmp
     .      .    5: #include <sched.h>
     .      .    6: 
     .      .    7: void SortedList_insert(SortedList_t *list, SortedListElement_t *element)
---
     .      .    8: {
     .      .    9:   int yield_insert = 0;
     .      .   10:   if(opt_yield==1 || opt_yield ==3 || opt_yield == 5 || opt_yield==7)
     .      .   11:     yield_insert = 1;
     .      .   12:   SortedList_t* curr;
     .      .   13:   SortedList_t* prev;
     .      .   14:   if(list->key!=NULL)
     .      .   15:     {
     .      .   16:       fprintf(stderr, "Inputed list is not a list head");
     .      .   17:       exit(1);
     .      .   18:     }
     .      .   19:   else if(list->next==NULL)
     .      .   20:     {
     .      .   21:       list->next=element;
     .      .   22:       element->prev=list;
     .      .   23:     }
     .      .   24:   else
     .      .   25:       {
     .      .   26: 	prev = list;
     .      .   27: 	curr = list->next;
    40    158   28: 	while(curr!=NULL && strcmp(element->key, curr->key)>0)
     .      .   29: 	  {
     3      3   30: 	    prev=curr;
     .      .   31: 	    if(yield_insert)
     .      .   32: 	      sched_yield();
     4      4   33: 	    curr=curr->next;
     .      .   34: 	  }
     .      .   35: 	if(curr==NULL)
     .      .   36: 	  {
     .      .   37: 	    element->prev=prev;
     .      .   38: 	    prev->next=element;
     .      .   39: 	  }
     .      .   40: 	else
     .      .   41: 	  {
     .      .   42: 	    element->next = curr;
     .      .   43: 	    element->prev=prev;
     .      .   44: 	    curr->prev=element;
     .      .   45: 	    prev->next=element;
     .      .   46: 	  }
     .      .   47:       }
     .      .   48: }
---
     .      .   49: int SortedList_delete(SortedListElement_t *element)
     .      .   50: {
     .      .   51:   int yield_insert = 0;
     .      .   52:   if(opt_yield==2 || opt_yield ==3 || opt_yield == 6 || opt_yield==7)
     .      .   53:     yield_insert = 1;
ROUTINE ====================== SortedList_insert in /u/cs/ugrad/thomasc/Documents/CS111/lab2/lab2b/SortedList.c
    47    165 Total samples (flat / cumulative)
     .      .    3: #include <stdlib.h> //exit
     .      .    4: #include <string.h> //strcmp
     .      .    5: #include <sched.h>
     .      .    6: 
     .      .    7: void SortedList_insert(SortedList_t *list, SortedListElement_t *element)
---
     .      .    8: {
     .      .    9:   int yield_insert = 0;
     .      .   10:   if(opt_yield==1 || opt_yield ==3 || opt_yield == 5 || opt_yield==7)
     .      .   11:     yield_insert = 1;
     .      .   12:   SortedList_t* curr;
     .      .   13:   SortedList_t* prev;
     .      .   14:   if(list->key!=NULL)
     .      .   15:     {
     .      .   16:       fprintf(stderr, "Inputed list is not a list head");
     .      .   17:       exit(1);
     .      .   18:     }
     .      .   19:   else if(list->next==NULL)
     .      .   20:     {
     .      .   21:       list->next=element;
     .      .   22:       element->prev=list;
     .      .   23:     }
     .      .   24:   else
     .      .   25:       {
     .      .   26: 	prev = list;
     .      .   27: 	curr = list->next;
    40    158   28: 	while(curr!=NULL && strcmp(element->key, curr->key)>0)
     .      .   29: 	  {
     3      3   30: 	    prev=curr;
     .      .   31: 	    if(yield_insert)
     .      .   32: 	      sched_yield();
     4      4   33: 	    curr=curr->next;
     .      .   34: 	  }
     .      .   35: 	if(curr==NULL)
     .      .   36: 	  {
     .      .   37: 	    element->prev=prev;
     .      .   38: 	    prev->next=element;
     .      .   39: 	  }
     .      .   40: 	else
     .      .   41: 	  {
     .      .   42: 	    element->next = curr;
     .      .   43: 	    element->prev=prev;
     .      .   44: 	    curr->prev=element;
     .      .   45: 	    prev->next=element;
     .      .   46: 	  }
     .      .   47:       }
     .      .   48: }
---
     .      .   49: int SortedList_delete(SortedListElement_t *element)
     .      .   50: {
     .      .   51:   int yield_insert = 0;
     .      .   52:   if(opt_yield==2 || opt_yield ==3 || opt_yield == 6 || opt_yield==7)
     .      .   53:     yield_insert = 1;
ROUTINE ====================== SortedList_lookup in /u/cs/ugrad/thomasc/Documents/CS111/lab2/lab2b/SortedList.c
    64    223 Total samples (flat / cumulative)
     .      .   80:       }
     .      .   81:     }
     .      .   82:   return 0;
     .      .   83: }
     .      .   84: SortedListElement_t *SortedList_lookup(SortedList_t *list, const char* key)
---
     .      .   85: {
     .      .   86:   int yield_insert = 0;
     .      .   87:   if(opt_yield==4 || opt_yield ==5 || opt_yield == 6 || opt_yield==7)
     .      .   88:     yield_insert = 1;
     .      .   89:   SortedList_t* temp;
     .      .   90:   if(list->next==NULL)
     .      .   91:     return NULL;
     .      .   92:   else
     .      .   93:     {
     .      .   94:       temp=list->next;
     .      .   95:     }
    55    214   96:   while(strcmp(temp->key, key)!=0 && temp->next != NULL)
     .      .   97:     {
     8      8   98:       if(yield_insert)
     .      .   99: 	sched_yield();
     1      1  100:       temp=temp->next;
     .      .  101:     }
     .      .  102:   if(strcmp(temp->key, key)==0)
     .      .  103:     return temp;
     .      .  104:   if(temp->next==NULL)
     .      .  105:     return NULL;
     .      .  106:   return temp;
     .      .  107: }
---
     .      .  108: 
     .      .  109: int SortedList_length(SortedList_t *list)
     .      .  110: {
     .      .  111:   int yield_insert = 0;
     .      .  112:   if(opt_yield==4 || opt_yield ==5 || opt_yield == 6 || opt_yield==7)
ROUTINE ====================== SortedList_lookup in /u/cs/ugrad/thomasc/Documents/CS111/lab2/lab2b/SortedList.c
    64    223 Total samples (flat / cumulative)
     .      .   80:       }
     .      .   81:     }
     .      .   82:   return 0;
     .      .   83: }
     .      .   84: SortedListElement_t *SortedList_lookup(SortedList_t *list, const char* key)
---
     .      .   85: {
     .      .   86:   int yield_insert = 0;
     .      .   87:   if(opt_yield==4 || opt_yield ==5 || opt_yield == 6 || opt_yield==7)
     .      .   88:     yield_insert = 1;
     .      .   89:   SortedList_t* temp;
     .      .   90:   if(list->next==NULL)
     .      .   91:     return NULL;
     .      .   92:   else
     .      .   93:     {
     .      .   94:       temp=list->next;
     .      .   95:     }
    55    214   96:   while(strcmp(temp->key, key)!=0 && temp->next != NULL)
     .      .   97:     {
     8      8   98:       if(yield_insert)
     .      .   99: 	sched_yield();
     1      1  100:       temp=temp->next;
     .      .  101:     }
     .      .  102:   if(strcmp(temp->key, key)==0)
     .      .  103:     return temp;
     .      .  104:   if(temp->next==NULL)
     .      .  105:     return NULL;
     .      .  106:   return temp;
     .      .  107: }
---
     .      .  108: 
     .      .  109: int SortedList_length(SortedList_t *list)
     .      .  110: {
     .      .  111:   int yield_insert = 0;
     .      .  112:   if(opt_yield==4 || opt_yield ==5 || opt_yield == 6 || opt_yield==7)
Total: 145 samples
     101  69.7%  69.7%      101  69.7% __strcmp_sse42
      19  13.1%  82.8%       70  48.3% SortedList_insert
      17  11.7%  94.5%       69  47.6% SortedList_lookup
       4   2.8%  97.2%        4   2.8% __lll_unlock_wake
       2   1.4%  98.6%        2   1.4% _init
       1   0.7%  99.3%        5   3.4% __GI___pthread_mutex_unlock
       1   0.7% 100.0%        1   0.7% __lll_lock_wait
       0   0.0% 100.0%        1   0.7% _L_lock_791
       0   0.0% 100.0%        4   2.8% _L_unlock_697
       0   0.0% 100.0%        1   0.7% __GI___pthread_mutex_lock
       0   0.0% 100.0%      145 100.0% __clone
       0   0.0% 100.0%      145 100.0% pthread_mutex
       0   0.0% 100.0%      145 100.0% start_thread
ROUTINE ====================== SortedList_insert in /u/cs/ugrad/thomasc/Documents/CS111/lab2/lab2b/SortedList.c
    19     70 Total samples (flat / cumulative)
     .      .    3: #include <stdlib.h> //exit
     .      .    4: #include <string.h> //strcmp
     .      .    5: #include <sched.h>
     .      .    6: 
     .      .    7: void SortedList_insert(SortedList_t *list, SortedListElement_t *element)
---
     .      .    8: {
     .      .    9:   int yield_insert = 0;
     .      .   10:   if(opt_yield==1 || opt_yield ==3 || opt_yield == 5 || opt_yield==7)
     .      .   11:     yield_insert = 1;
     .      .   12:   SortedList_t* curr;
     .      .   13:   SortedList_t* prev;
     .      .   14:   if(list->key!=NULL)
     .      .   15:     {
     .      .   16:       fprintf(stderr, "Inputed list is not a list head");
     .      .   17:       exit(1);
     .      .   18:     }
     .      .   19:   else if(list->next==NULL)
     .      .   20:     {
     .      .   21:       list->next=element;
     .      .   22:       element->prev=list;
     .      .   23:     }
     .      .   24:   else
     .      .   25:       {
     .      .   26: 	prev = list;
     .      .   27: 	curr = list->next;
    14     65   28: 	while(curr!=NULL && strcmp(element->key, curr->key)>0)
     .      .   29: 	  {
     .      .   30: 	    prev=curr;
     1      1   31: 	    if(yield_insert)
     .      .   32: 	      sched_yield();
     4      4   33: 	    curr=curr->next;
     .      .   34: 	  }
     .      .   35: 	if(curr==NULL)
     .      .   36: 	  {
     .      .   37: 	    element->prev=prev;
     .      .   38: 	    prev->next=element;
     .      .   39: 	  }
     .      .   40: 	else
     .      .   41: 	  {
     .      .   42: 	    element->next = curr;
     .      .   43: 	    element->prev=prev;
     .      .   44: 	    curr->prev=element;
     .      .   45: 	    prev->next=element;
     .      .   46: 	  }
     .      .   47:       }
     .      .   48: }
---
     .      .   49: int SortedList_delete(SortedListElement_t *element)
     .      .   50: {
     .      .   51:   int yield_insert = 0;
     .      .   52:   if(opt_yield==2 || opt_yield ==3 || opt_yield == 6 || opt_yield==7)
     .      .   53:     yield_insert = 1;
ROUTINE ====================== SortedList_insert in /u/cs/ugrad/thomasc/Documents/CS111/lab2/lab2b/SortedList.c
    19     70 Total samples (flat / cumulative)
     .      .    3: #include <stdlib.h> //exit
     .      .    4: #include <string.h> //strcmp
     .      .    5: #include <sched.h>
     .      .    6: 
     .      .    7: void SortedList_insert(SortedList_t *list, SortedListElement_t *element)
---
     .      .    8: {
     .      .    9:   int yield_insert = 0;
     .      .   10:   if(opt_yield==1 || opt_yield ==3 || opt_yield == 5 || opt_yield==7)
     .      .   11:     yield_insert = 1;
     .      .   12:   SortedList_t* curr;
     .      .   13:   SortedList_t* prev;
     .      .   14:   if(list->key!=NULL)
     .      .   15:     {
     .      .   16:       fprintf(stderr, "Inputed list is not a list head");
     .      .   17:       exit(1);
     .      .   18:     }
     .      .   19:   else if(list->next==NULL)
     .      .   20:     {
     .      .   21:       list->next=element;
     .      .   22:       element->prev=list;
     .      .   23:     }
     .      .   24:   else
     .      .   25:       {
     .      .   26: 	prev = list;
     .      .   27: 	curr = list->next;
    14     65   28: 	while(curr!=NULL && strcmp(element->key, curr->key)>0)
     .      .   29: 	  {
     .      .   30: 	    prev=curr;
     1      1   31: 	    if(yield_insert)
     .      .   32: 	      sched_yield();
     4      4   33: 	    curr=curr->next;
     .      .   34: 	  }
     .      .   35: 	if(curr==NULL)
     .      .   36: 	  {
     .      .   37: 	    element->prev=prev;
     .      .   38: 	    prev->next=element;
     .      .   39: 	  }
     .      .   40: 	else
     .      .   41: 	  {
     .      .   42: 	    element->next = curr;
     .      .   43: 	    element->prev=prev;
     .      .   44: 	    curr->prev=element;
     .      .   45: 	    prev->next=element;
     .      .   46: 	  }
     .      .   47:       }
     .      .   48: }
---
     .      .   49: int SortedList_delete(SortedListElement_t *element)
     .      .   50: {
     .      .   51:   int yield_insert = 0;
     .      .   52:   if(opt_yield==2 || opt_yield ==3 || opt_yield == 6 || opt_yield==7)
     .      .   53:     yield_insert = 1;
ROUTINE ====================== SortedList_lookup in /u/cs/ugrad/thomasc/Documents/CS111/lab2/lab2b/SortedList.c
    17     69 Total samples (flat / cumulative)
     .      .   80:       }
     .      .   81:     }
     .      .   82:   return 0;
     .      .   83: }
     .      .   84: SortedListElement_t *SortedList_lookup(SortedList_t *list, const char* key)
---
     .      .   85: {
     .      .   86:   int yield_insert = 0;
     .      .   87:   if(opt_yield==4 || opt_yield ==5 || opt_yield == 6 || opt_yield==7)
     .      .   88:     yield_insert = 1;
     .      .   89:   SortedList_t* temp;
     .      .   90:   if(list->next==NULL)
     .      .   91:     return NULL;
     .      .   92:   else
     .      .   93:     {
     .      .   94:       temp=list->next;
     .      .   95:     }
    15     67   96:   while(strcmp(temp->key, key)!=0 && temp->next != NULL)
     .      .   97:     {
     2      2   98:       if(yield_insert)
     .      .   99: 	sched_yield();
     .      .  100:       temp=temp->next;
     .      .  101:     }
     .      .  102:   if(strcmp(temp->key, key)==0)
     .      .  103:     return temp;
     .      .  104:   if(temp->next==NULL)
     .      .  105:     return NULL;
     .      .  106:   return temp;
     .      .  107: }
---
     .      .  108: 
     .      .  109: int SortedList_length(SortedList_t *list)
     .      .  110: {
     .      .  111:   int yield_insert = 0;
     .      .  112:   if(opt_yield==4 || opt_yield ==5 || opt_yield == 6 || opt_yield==7)
ROUTINE ====================== SortedList_lookup in /u/cs/ugrad/thomasc/Documents/CS111/lab2/lab2b/SortedList.c
    17     69 Total samples (flat / cumulative)
     .      .   80:       }
     .      .   81:     }
     .      .   82:   return 0;
     .      .   83: }
     .      .   84: SortedListElement_t *SortedList_lookup(SortedList_t *list, const char* key)
---
     .      .   85: {
     .      .   86:   int yield_insert = 0;
     .      .   87:   if(opt_yield==4 || opt_yield ==5 || opt_yield == 6 || opt_yield==7)
     .      .   88:     yield_insert = 1;
     .      .   89:   SortedList_t* temp;
     .      .   90:   if(list->next==NULL)
     .      .   91:     return NULL;
     .      .   92:   else
     .      .   93:     {
     .      .   94:       temp=list->next;
     .      .   95:     }
    15     67   96:   while(strcmp(temp->key, key)!=0 && temp->next != NULL)
     .      .   97:     {
     2      2   98:       if(yield_insert)
     .      .   99: 	sched_yield();
     .      .  100:       temp=temp->next;
     .      .  101:     }
     .      .  102:   if(strcmp(temp->key, key)==0)
     .      .  103:     return temp;
     .      .  104:   if(temp->next==NULL)
     .      .  105:     return NULL;
     .      .  106:   return temp;
     .      .  107: }
---
     .      .  108: 
     .      .  109: int SortedList_length(SortedList_t *list)
     .      .  110: {
     .      .  111:   int yield_insert = 0;
     .      .  112:   if(opt_yield==4 || opt_yield ==5 || opt_yield == 6 || opt_yield==7)
